codeunit 90503 "TPV Auto-apply Entries"
{

    Permissions = TableData "Cust. Ledger Entry" = rimd;

    var
        PostingApplicationMsg: Label 'Posting application...';
        NoEntriesAppliedErr: Label 'Cannot post because you did not specify which entry to apply. You must specify an entry in the %1 field for one or more open entries.', Comment = '%1 - Caption of "Applies to ID" field of Gen. Journal Line';
        MustNotBeBeforeErr: Label 'The posting date entered must not be before the posting date on the Cust. Ledger Entry.';
        Text1100000: Label 'Application of %1 %2';
        Text1100001: Label 'Application of %1 %2/%3';
        Text1100002: Label 'To apply a set of entries containing bills, rejected invoices or invoices to cartera, the cursor should be positioned on an entry different than bill type, rejected invoice or invoices to cartera.';

    // Catch an invoice when posting, look for payments made for the invoiced order and apply those entries to the one generated by the invoice

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", OnRunOnBeforeFinalizePosting, '', false, false)]
    local procedure "Sales-Post_OnAfterFinalizePostingOnBeforeCommit"(PreviewMode: Boolean; var SalesInvoiceHeader: Record "Sales Invoice Header"; var SalesHeader: Record "Sales Header"; CommitIsSuppressed: Boolean)
    begin
        if PreviewMode then
            exit;

        ApplyEntriesToInvoice(SalesInvoiceHeader, SalesHeader, PreviewMode);
    end;

    [CommitBehavior(CommitBehavior::Error)] // If we commit here the invoice and shipment are created even if errors happen
    procedure ApplyEntriesToInvoice(SalesInvoiceHeader: Record "Sales Invoice Header"; SalesHeader: Record "Sales Header"; PreviewMode: Boolean)
    var
        GeneralLedgerSetup: Record "General Ledger Setup";
        InvoiceCustLedgerEntry, CustLedgerEntry : Record "Cust. Ledger Entry";
        ApplyUnapplyParameters: Record "Apply Unapply Parameters" temporary;
        CustEntrySetApplID: Codeunit "Cust. Entry-SetAppl.ID";
        ApplicationDate: Date;
    begin
        InvoiceCustLedgerEntry.SetRange("Document Type", Enum::"Gen. Journal Document Type"::Invoice);
        InvoiceCustLedgerEntry.SetRange("Document No.", SalesInvoiceHeader."No.");
        if not InvoiceCustLedgerEntry.FindLast() then
            exit;

        InvoiceCustLedgerEntry.CalcFields("Remaining Amount");
        if InvoiceCustLedgerEntry."Remaining Amount" = 0 then begin
            Message('Existen prepagos para esta factura que no se han registrado debido a que el pago se realizar√° en forma de efectos');
            exit;
        end;

        InvoiceCustLedgerEntry."Amount to Apply" := InvoiceCustLedgerEntry."Remaining Amount";
        InvoiceCustLedgerEntry."Applies-to ID" := UserId();
        InvoiceCustLedgerEntry.Modify();

        GeneralLedgerSetup.GetRecordOnce();

        ApplicationDate := GetApplicationDate(InvoiceCustLedgerEntry);
        ApplyUnapplyParameters.CopyFromCustLedgEntry(InvoiceCustLedgerEntry);
        ApplyUnapplyParameters."Posting Date" := ApplicationDate;
        ApplyUnapplyParameters."Journal Template Name" := GeneralLedgerSetup."Apply Jnl. Template Name";
        ApplyUnapplyParameters."Journal Batch Name" := GeneralLedgerSetup."Apply Jnl. Batch Name";

        CustLedgerEntry.SetRange("Customer No.", SalesHeader."Bill-to Customer No.");
        CustLedgerEntry.SetRange("Payment Reference", SalesHeader."No.");
        CustLedgerEntry.SetRange(Open, true);
        if CustLedgerEntry.IsEmpty() then
            exit;

        CustLedgerEntry.FindSet();
        repeat
            CustEntrySetApplID.SetApplId(CustLedgerEntry, InvoiceCustLedgerEntry, UserId());
        until CustLedgerEntry.Next() = 0;

        // Update the records in the variable that have been updated updated in the previous step
        SelectLatestVersion();

        // We copy the functions from CustEntryApplyPostedEntries: Codeunit "CustEntry-Apply Posted Entries" because
        // Tolerance management has a commit that cannot be circumvented otherwise
        if not Apply(InvoiceCustLedgerEntry, ApplyUnapplyParameters, PreviewMode) then
            Error('Existing payments cannot be applied to invoice');
    end;


    procedure Apply(CustLedgEntry: Record "Cust. Ledger Entry"; ApplyUnapplyParameters: Record "Apply Unapply Parameters"; PreviewMode: Boolean): Boolean
    var
        PaymentToleranceMgt: Codeunit "Payment Tolerance Management";
    begin
        if (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Bill) or
           ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) and
            (CustLedgEntry."Document Situation" = CustLedgEntry."Document Situation"::"Closed BG/PO") and
            (CustLedgEntry."Document Status" = CustLedgEntry."Document Status"::Rejected)) or
           ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) and
            (CustLedgEntry."Document Situation" = CustLedgEntry."Document Situation"::Cartera) and
            (CustLedgEntry."Document Status" = CustLedgEntry."Document Status"::Open))
        then
            Error(Text1100002);

        if not PreviewMode then begin
            PaymentToleranceMgt.SetSuppressCommit(true);
            if not PaymentToleranceMgt.PmtTolCust(CustLedgEntry) then
                exit(false);
        end;

        CustLedgEntry.Get(CustLedgEntry."Entry No.");

        if ApplyUnapplyParameters."Posting Date" = 0D then
            ApplyUnapplyParameters."Posting Date" := GetApplicationDate(CustLedgEntry)
        else
            if ApplyUnapplyParameters."Posting Date" < GetApplicationDate(CustLedgEntry) then
                Error(MustNotBeBeforeErr);

        if ApplyUnapplyParameters."Document No." = '' then
            ApplyUnapplyParameters."Document No." := CustLedgEntry."Document No.";

        CustPostApplyCustLedgEntry(CustLedgEntry, ApplyUnapplyParameters);
        exit(true);
    end;

    procedure GetApplicationDate(CustLedgEntry: Record "Cust. Ledger Entry") ApplicationDate: Date
    var
        ApplyToCustLedgEntry: Record "Cust. Ledger Entry";
    begin
        ApplicationDate := 0D;
        ApplyToCustLedgEntry.SetCurrentKey("Customer No.", "Applies-to ID");
        ApplyToCustLedgEntry.SetRange("Customer No.", CustLedgEntry."Customer No.");
        ApplyToCustLedgEntry.SetRange("Applies-to ID", CustLedgEntry."Applies-to ID");
        ApplyToCustLedgEntry.FindSet();
        repeat
            if ApplyToCustLedgEntry."Posting Date" > ApplicationDate then
                ApplicationDate := ApplyToCustLedgEntry."Posting Date";
        until ApplyToCustLedgEntry.Next() = 0;
    end;

    local procedure CustPostApplyCustLedgEntry(CustLedgEntry: Record "Cust. Ledger Entry"; ApplyUnapplyParameters: Record "Apply Unapply Parameters")
    var
        SourceCodeSetup: Record "Source Code Setup";
        GenJnlLine: Record "Gen. Journal Line";
        GenJnlPostLine: Codeunit "Gen. Jnl.-Post Line";
        GenJnlPostPreview: Codeunit "Gen. Jnl.-Post Preview";
        Window: Dialog;
        EntryNoBeforeApplication: Integer;
        EntryNoAfterApplication: Integer;
        HideProgressWindow: Boolean;
    begin
        if not HideProgressWindow then
            Window.Open(PostingApplicationMsg);

        SourceCodeSetup.Get();

        GenJnlLine.Init();
        GenJnlLine."Document No." := ApplyUnapplyParameters."Document No.";
        GenJnlLine."Posting Date" := ApplyUnapplyParameters."Posting Date";
        GenJnlLine."VAT Reporting Date" := GenJnlLine."Posting Date";
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := CustLedgEntry."Customer No.";
        CustLedgEntry.CalcFields("Debit Amount", "Credit Amount", "Debit Amount (LCY)", "Credit Amount (LCY)");
        GenJnlLine.Correction :=
            (CustLedgEntry."Debit Amount" < 0) or (CustLedgEntry."Credit Amount" < 0) or
            (CustLedgEntry."Debit Amount (LCY)" < 0) or (CustLedgEntry."Credit Amount (LCY)" < 0);
        GenJnlLine.CopyCustLedgEntry(CustLedgEntry);
        if CustLedgEntry."Document Type" <> CustLedgEntry."Document Type"::Bill then
            GenJnlLine.Description := StrSubstNo(Text1100000, CustLedgEntry."Document Type", CustLedgEntry."Document No.")
        else
            GenJnlLine.Description := StrSubstNo(Text1100001, CustLedgEntry."Document Type", CustLedgEntry."Document No.", CustLedgEntry."Bill No.");
        GenJnlLine."Source Code" := SourceCodeSetup."Sales Entry Application";
        GenJnlLine."System-Created Entry" := true;
        GenJnlLine."Journal Template Name" := ApplyUnapplyParameters."Journal Template Name";
        GenJnlLine."Journal Batch Name" := ApplyUnapplyParameters."Journal Batch Name";

        EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry();

        GenJnlPostLine.SetIDBillSettlement(IsToSetIDBillSettlement(CustLedgEntry));
        GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine, CustLedgEntry);

        EntryNoAfterApplication := FindLastApplDtldCustLedgEntry();
        if EntryNoAfterApplication = EntryNoBeforeApplication then
            Error(NoEntriesAppliedErr, GenJnlLine.FieldCaption("Applies-to ID"));

        if not HideProgressWindow then
            Window.Close();
        RunUpdateAnalysisView();
    end;

    local procedure RunUpdateAnalysisView()
    var
        UpdateAnalysisView: Codeunit "Update Analysis View";
    begin
        UpdateAnalysisView.UpdateAll(0, true);
    end;

    local procedure FindLastApplDtldCustLedgEntry(): Integer
    var
        DtldCustLedgEntry: Record "Detailed Cust. Ledg. Entry";
    begin
        DtldCustLedgEntry.LockTable();
        exit(DtldCustLedgEntry.GetLastEntryNo());
    end;

    local procedure IsToSetIDBillSettlement(CustLedgEntry2: Record "Cust. Ledger Entry"): Boolean
    begin
        if CustLedgEntry2."Applies-to ID" = '' then
            exit(false);
        if BeAppliedToBill(CustLedgEntry2) then
            exit(true);
        exit(BeAppliedToInvoiceToCartera(CustLedgEntry2));
    end;

    local procedure BeAppliedToBill(CustLedgEntry2: Record "Cust. Ledger Entry"): Boolean
    var
        CustLedgEntry3: Record "Cust. Ledger Entry";
    begin
        CustLedgEntry3.SetCurrentKey("Applies-to ID", "Document Type");
        CustLedgEntry3.SetRange("Applies-to ID", CustLedgEntry2."Applies-to ID");
        CustLedgEntry3.SetRange("Document Type", CustLedgEntry2."Document Type"::Bill);
        if not CustLedgEntry3.IsEmpty() then
            exit(true);
        exit(false);
    end;

    local procedure BeAppliedToInvoiceToCartera(CustLedgEntry2: Record "Cust. Ledger Entry"): Boolean
    var
        CustLedgEntry3: Record "Cust. Ledger Entry";
    begin
        CustLedgEntry3.SetCurrentKey("Applies-to ID", "Document Type", "Document Situation", "Document Status");
        CustLedgEntry3.SetRange("Applies-to ID", CustLedgEntry2."Applies-to ID");
        CustLedgEntry3.SetRange("Document Type", CustLedgEntry2."Document Type"::Invoice);
        CustLedgEntry3.SetRange("Document Situation", CustLedgEntry3."Document Situation"::"Closed BG/PO");
        CustLedgEntry3.SetRange("Document Status", CustLedgEntry3."Document Status"::Rejected);
        if not CustLedgEntry3.IsEmpty() then
            exit(true);
        exit(false);
    end;

}